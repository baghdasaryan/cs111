# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Georgi Baghdasaryan
Student ID: 603 875 284
Email: baghdasaryan@ucla.edu

# Partner 2 (if you're working in a team)

EXERCISE 1: What method you used to make your peer download and upload
   files in parallel?  (~1-3 sentences)

I used forks to create new processes that download data in parallel, and
  then upload data using a similar technique. I have used a wait command to
  detect whenever a subprocess finishes if, currently, there are no free
  processes.

EXERCISE 2A: What conditions did you find and fix that would have
   triggered a buffer overrun bug?  (~1-3 sentences each)

A filename overrun bug in case the provided filename length exceeds
  FILENAMESIZ-1 bytes. I switched from using strcpy to using strncpy 
  to restrict the number of  bytes being copied to the filename buffer. After
  copying data I added a NULL terminator at the end of the generated data to
  ensure that, in the future, it will be read correctly. In addition, an error
  message is displayed to notify the user that the filelength is too long.

EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
  each)

1. Prevent endless data streams: fixed by putting an upper limit of 1GiB on
     the file size.
2. Block slow peers: fixed by setting a minimum transfer rate and comparing
     the average of last ten data streams to it; if peer's transfer rate is
     lower than the minimum value, program switches to the next peer.
3. Prevent peers from downloading data from directories other than the current
     one: fixed by comparing current directory to the requested directory.
4. Check that files and paths exist.
5. Task buffer might be too small for the number of peers: fixed by increasing
     TASKBUFSIZ (from 4096 to 65536).
6. Make sure that neither the request string nor the filename is too long:
     checking lengths.
7. Files can be corrupted: not implemented.


EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
   are they attacks?  (~3-10 sentences each)

1. Upload attack: send peer an infinite data stream instead of the requested
     file. This is an attack, because peer might think that this is a file and
     keep storing received data, which would result in hard disk filling up.

2. Download attacks: 
     a. Send peer a file request with a super long filename. This is an
          attack, because it may crash the peer.
     b. Try accessing peer's private files (files that were not intended to be
          shared).
     c. Dos attack peers.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
